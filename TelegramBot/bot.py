import logging
import os
import requests
import traceback
from telegram.constants import ParseMode
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)



async def get_user_profile_photo(user_id: int, bot) -> str:
    try:
        photos = await bot.get_user_profile_photos(user_id, limit=1)
        return photos.photos[0][-1].file_id if photos.photos else ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {str(e)}")
        return ""

def add_user_to_baserow(telegram_id: int, username: str, profile_image_url: str) -> bool:
    url = f"{os.getenv('BASEROW_BASE_URL')}/database/rows/table/{os.getenv('BASEROW_USERS_ID')}/?user_field_names=true"
    headers = {
        "Authorization": f"Token {os.getenv('BASEROW_TOKEN')}",
        "Content-Type": "application/json"
    }
    data = {
        "TelegramID": telegram_id,
        "Username": username,
        "ProfileImage": profile_image_url
    }
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        response = requests.post(url, headers=headers, json=data)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
        return response.status_code == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return False

def fetch_lot_data_by_lot_id(lot_id: str):
    try:
        url = f"{os.getenv('BASEROW_BASE_URL')}/database/rows/table/{os.getenv('BASEROW_LOTS_ID')}/{lot_id}/?user_field_names=true"
        response = requests.get(url, headers={"Authorization": f"Token {os.getenv('BASEROW_TOKEN')}"})
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ—Ç–∞ {lot_id}: {response.status_code}")
        return response.json() if response.status_code == 200 else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–∞: {str(e)}")
        return None

def get_artist_display_name(artist_id: str) -> str:
    try:
        url = f"{os.getenv('BASEROW_BASE_URL')}/database/rows/table/{os.getenv('BASEROW_ARTISTS_ID')}/{artist_id}/?user_field_names=true"
        response = requests.get(url, headers={"Authorization": f"Token {os.getenv('BASEROW_TOKEN')}"})
        if response.status_code == 200:
            return response.json().get('displayName', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞: {str(e)}")
        return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

def get_user_baserow_id(telegram_id: int) -> int:
    logger.debug(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤ Baserow")
    try:
        url = f"{os.getenv('BASEROW_BASE_URL')}/database/rows/table/{os.getenv('BASEROW_USERS_ID')}/?user_field_names=true"
        response = requests.get(url, headers={"Authorization": f"Token {os.getenv('BASEROW_TOKEN')}"})
        for user in response.json().get('results', []):
            if str(user.get('TelegramID')) == str(telegram_id):
                return user.get('id')
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return None

def get_max_bet_info(lot_id: str, initial_price: float) -> tuple:
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ª–æ—Ç–∞ {lot_id}")
        url = f"{os.getenv('BASEROW_BASE_URL')}/database/rows/table/{os.getenv('BASEROW_BETS_ID')}/?user_field_names=true"
        response = requests.get(url, headers={"Authorization": f"Token {os.getenv('BASEROW_TOKEN')}"})
        bets = [
            bet for bet in response.json().get('results', [])
            if bet.get('Lot', [{}])[0].get('id') == int(lot_id)
        ]
        
        valid_bets = []
        for bet in bets:
            try:
                bet_value = float(bet.get('BetValue', 0))
                valid_bets.append((bet_value, bet))
            except (ValueError, TypeError) as e:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {str(e)}")
                continue

        if not valid_bets:
            logger.info("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫")
            return (float(initial_price), None)
            
        max_bet = max(valid_bets, key=lambda x: x[0])
        user_id = max_bet[1].get('User', [{}])[0].get('id')
        logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {max_bet[0]} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return (max_bet[0], user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫: {str(e)}")
        return (float(initial_price), None)

async def notify_previous_leader(bot, user_baserow_id: int, lot_data: dict, new_bet: float, lot_id: str):
    try:
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_baserow_id}")
        url = f"{os.getenv('BASEROW_BASE_URL')}/database/rows/table/{os.getenv('BASEROW_USERS_ID')}/{user_baserow_id}/?user_field_names=true"
        response = requests.get(url, headers={"Authorization": f"Token {os.getenv('BASEROW_TOKEN')}"})
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
            return

        user_data = response.json()
        telegram_id = user_data.get('TelegramID')
        if not telegram_id:
            logger.error("Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        from telegram.helpers import escape_markdown
        lot_name = escape_markdown(lot_data.get('Name', '–õ–æ—Ç'), version=2)
        escaped_bet = escape_markdown(f"{new_bet:.0f}", version=2)
        
        keyboard = [[InlineKeyboardButton("üí∞ –ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"raise_bet_{lot_id}")]]
        
        await bot.send_message(
            chat_id=telegram_id,
            text=f"‚ô¶Ô∏è –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ª–æ—Ç *¬´{lot_name}¬ª* –ø–µ—Ä–µ–±–∏—Ç–∞\!\n–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: *{escaped_bet} ‚ÇΩ*",
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}\n{traceback.format_exc()}")

async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        _, lot_id = query.data.split('_', 2)[-2:]
        
        lot_data = fetch_lot_data_by_lot_id(lot_id)
        if not lot_data:
            await query.message.reply_text("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        context.user_data.update({
            'lot_id': lot_id,
            'user_id': query.from_user.id
        })
        
        await query.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ª–æ—Ç–∞ ‚Ññ{lot_data.get('LotNumber', '')}:"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {str(e)}\n{traceback.format_exc()}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        args = context.args
        
        if args and args[0].startswith("bid_"):
            params = args[0].split("_")
            if len(params) >= 3:
                lot_id = params[1]
                initial_amount = params[2]
                logger.info(f"–°—Ç–∞–≤–∫–∞ –∏–∑ —Å–∞–π—Ç–∞: –ª–æ—Ç {lot_id}, —Å—É–º–º–∞ {initial_amount}")
                await handle_bet_command(update, context, lot_id, user, initial_amount)
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",  web_app=WebAppInfo(url="https://aspyart.com"))]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}\n{traceback.format_exc()}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

async def handle_bet_command(update: Update, context: ContextTypes.DEFAULT_TYPE, lot_id: str, user, initial_amount: str = None):
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ—Ç–∞ {lot_id} –¥–ª—è {user.id}, –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {initial_amount}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not get_user_baserow_id(user.id):
            profile_image = await get_user_profile_photo(user.id, context.bot)
            if not add_user_to_baserow(user.id, user.username, profile_image):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                return

        lot_data = fetch_lot_data_by_lot_id(lot_id)
        if not lot_data:
            await update.message.reply_text("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ
        artists = ", ".join([get_artist_display_name(a.get('id')) for a in lot_data.get('Artists', []) if a.get('id')])
        initial_price = float(lot_data.get('InitialPrice', 0))
        current_max, _ = get_max_bet_info(lot_id, initial_price)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–≤–∫–∏ —Å —Å–∞–π—Ç–∞
        suggested_amount = ""
        if initial_amount:
            try:
                amount_float = float(initial_amount)
                if amount_float > current_max:
                    suggested_amount = f"\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {amount_float} ‚ÇΩ"
            except ValueError:
                pass
                
        message = (
            f"–ê–≤—Ç–æ—Ä: {artists or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
            f"–õ–æ—Ç: {lot_data['Name']}\n"
            f"–ù–æ–º–µ—Ä: {lot_data.get('LotNumber', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
            f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {initial_price} ‚ÇΩ\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_max} ‚ÇΩ{suggested_amount}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if image_url := lot_data.get('Image', [{}])[0].get('url'):
            try:
                response = requests.get(image_url)
                with open("temp_img.jpg", "wb") as f:
                    f.write(response.content)
                await update.message.reply_photo(open("temp_img.jpg", "rb"), caption=message)
                os.remove("temp_img.jpg")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                await update.message.reply_text(message)
        else:
            await update.message.reply_text(message)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞
        context_data = {'lot_id': lot_id, 'user_id': user.id}
        
        if initial_amount:
            try:
                amount_float = float(initial_amount)
                if amount_float > current_max:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ URL
                    context_data['initial_bet_value'] = amount_float
                    await update.message.reply_text(
                        f"üí° –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ {amount_float} ‚ÇΩ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É."
                    )
            except ValueError:
                pass
                
        context.user_data.update(context_data)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}\n{traceback.format_exc()}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_bet_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        lot_id = context.user_data.get('lot_id')
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –æ—Ç {user.id} –¥–ª—è –ª–æ—Ç–∞ {lot_id}")

        if not lot_id or context.user_data.get('user_id') != user.id:
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        if context.user_data.get('awaiting_phone'):
            await handle_phone_input(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" 
        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        initial_bet = context.user_data.get('initial_bet_value')
        
        if update.message.text.lower() in ["–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm", "–¥–∞", "yes"] and initial_bet:
            bet_value = initial_bet
        else:
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
            try:
                bet_value = float(update.message.text.replace(",", "."))
                if bet_value <= 0:
                    raise ValueError
            except (ValueError, TypeError):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞,
                # –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é
                if initial_bet:
                    await update.message.reply_text(
                        f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '{initial_bet}' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏"
                    )
                else:
                    await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
                return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–∞
        lot_data = fetch_lot_data_by_lot_id(lot_id)
        initial_price = float(lot_data.get('InitialPrice', 0)) if lot_data else 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–≤–æ–∫
        current_max, previous_leader_id = get_max_bet_info(lot_id, initial_price)
        user_baserow_id = get_user_baserow_id(user.id)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if bet_value <= current_max:
            await update.message.reply_text(f"üìâ –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ {current_max} ‚ÇΩ")
            return
            
        if user_baserow_id == previous_leader_id:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø–æ–≤—ã—à–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞–≤–∫—É")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context.user_data.update({
            'previous_leader_id': previous_leader_id,
            'previous_max': current_max,
            'bet_value': bet_value
        })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        user_data_url = f"{os.getenv('BASEROW_BASE_URL')}/database/rows/table/{os.getenv('BASEROW_USERS_ID')}/{user_baserow_id}/?user_field_names=true"
        response = requests.get(user_data_url, headers={"Authorization": f"Token {os.getenv('BASEROW_TOKEN')}"})
        
        if response.status_code != 200 or not response.json().get('PhoneNumber'):
            context.user_data['awaiting_phone'] = True
            await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (79XXXXXXXXX):")
            return

        await process_bet(context, update, lot_id, user.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏: {str(e)}\n{traceback.format_exc()}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        phone = update.message.text.strip()
        
        if not (len(phone) == 11 and phone.startswith('79') and phone.isdigit()):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞")
            return
            
        if not update_user_phone_number(user.id, phone):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞")
            return

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–∫–∏
        required_keys = ['previous_leader_id', 'previous_max', 'bet_value']
        if not all(k in context.user_data for k in required_keys):
            await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        await process_bet(context, update, 
                         context.user_data['lot_id'], 
                         user.id)
        
        context.user_data.pop('awaiting_phone', None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(e)}\n{traceback.format_exc()}")
        await update.message.reply_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

async def process_bet(context, update, lot_id, user_id):
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ª–æ—Ç–∞ {lot_id}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        previous_leader_id = context.user_data.get('previous_leader_id')
        previous_max = context.user_data.get('previous_max')
        bet_value = context.user_data.get('bet_value')
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if None in (previous_max, bet_value):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        user_baserow_id = get_user_baserow_id(user_id)
        if not user_baserow_id or not add_bet_to_baserow(lot_id, user_id, bet_value):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏")
            return

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ª–∏–¥–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if previous_leader_id and previous_leader_id != user_baserow_id:
            lot_data = fetch_lot_data_by_lot_id(lot_id)
            if lot_data:
                await notify_previous_leader(
                    context.bot,
                    previous_leader_id,
                    lot_data,
                    bet_value,
                    lot_id
                )
        admin_chat_id = os.getenv('ADMIN_TELEGRAM_ID')
        if admin_chat_id:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_baserow_id = get_user_baserow_id(user_id)
            user_data = requests.get(
                f"{os.getenv('BASEROW_BASE_URL')}/database/rows/table/{os.getenv('BASEROW_USERS_ID')}/{user_baserow_id}/?user_field_names=true",
                headers={"Authorization": f"Token {os.getenv('BASEROW_TOKEN')}"}
            ).json()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞
            lot_data = fetch_lot_data_by_lot_id(lot_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                "üéâ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞!\n\n"
                f"–õ–æ—Ç: {lot_data.get('Name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                f"–ù–æ–º–µ—Ä –ª–æ—Ç–∞: {lot_data.get('LotNumber', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                f"–°—Ç–∞–≤–∫–∞: {bet_value:.0f} ‚ÇΩ\n"
                f"TG ID: {user_id}\n"
                f"Username: @{user_data.get('Username', '–Ω–µ—Ç')}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('PhoneNumber', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await context.bot.send_message(
                chat_id=admin_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
        else:
            logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω ADMIN_TELEGRAM_ID –≤ .env")

        web_app_button = InlineKeyboardButton(
            "üñº –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url="https://aspyart.com")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await update.message.reply_text(
            f"‚úÖ –°—Ç–∞–≤–∫–∞ {bet_value} ‚ÇΩ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            f"–ú—ã —Å–æ–æ–±—â–∏–º, –µ—Å–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –ø–µ—Ä–µ–±—å—é—Ç –∏–ª–∏ –≤—ã –≤—ã–∏–≥—Ä–∞–µ—Ç–µ –∞—É–∫—Ü–∏–æ–Ω. –ò—Ç–æ–≥–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã 8 —Ñ–µ–≤—Ä–∞–ª—è 2025 –≥–æ–¥–∞.",
            reply_markup=InlineKeyboardMarkup([[web_app_button]])
        )
        
 
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('previous_leader_id', None)
        context.user_data.pop('previous_max', None)
        context.user_data.pop('bet_value', None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_bet: {str(e)}\n{traceback.format_exc()}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def send_event_info(update):
    await update.message.reply_text(
        "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –í–∞—Å –Ω–∞ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ—Ä–µ–º–æ–Ω–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—Å—Ç–∞–≤–∫–∏ –ï–≤–≥–µ–Ω–∏—è –ù–æ–≤–∞–Ω–∞ ¬´–í–µ—á–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ¬ª\n\n"

        "–í–µ—á–µ—Ä–æ–º —É –≤–∞—Å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –ª–∏—á–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º\n\n"

        "üèõ –ì–∞–ª–µ—Ä–µ—è ¬´–ê—Ä–∫–∞¬ª\n"
        "7 —Ñ–µ–≤—Ä–∞–ª—è —Å 17:00 –¥–æ 20:00"
    
    )
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∞—Ä–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ  (–æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞)
async def notify_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if str(update.effective_user.id) != os.getenv('ADMIN_TELEGRAM_ID'):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /notify <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return

        user_id, *message_parts = context.args
        message = ' '.join(message_parts)

        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await context.bot.send_message(
                chat_id=int(user_id),
                text=f"üîî –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message}"
            )
            await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /notify: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")    

def add_bet_to_baserow(lot_id: str, user_id: int, bet_value: float) -> bool:
    try:
        user_baserow_id = get_user_baserow_id(user_id)
        if not user_baserow_id:
            return False

        data = {
            "BetValue": bet_value,
            "Date": datetime.now().isoformat(),
            "User": [user_baserow_id],
            "Lot": int(lot_id)
        }
        
        response = requests.post(
            f"{os.getenv('BASEROW_BASE_URL')}/database/rows/table/{os.getenv('BASEROW_BETS_ID')}/?user_field_names=true",
            headers={"Authorization": f"Token {os.getenv('BASEROW_TOKEN')}"},
            json=data
        )
        
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏: {str(e)}")
        return False

def update_user_phone_number(telegram_id: int, phone: str) -> bool:
    try:
        user_id = get_user_baserow_id(telegram_id)
        if not user_id:
            return False
            
        response = requests.patch(
            f"{os.getenv('BASEROW_BASE_URL')}/database/rows/table/{os.getenv('BASEROW_USERS_ID')}/{user_id}/?user_field_names=true",
            headers={"Authorization": f"Token {os.getenv('BASEROW_TOKEN')}"},
            json={"PhoneNumber": phone}
        )
        
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(e)}")
        return False

def run_telegram_bot():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = ApplicationBuilder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
    
    application.add_handler(CommandHandler("notify", notify_user))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_button_click, pattern="^raise_bet_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r'^79\d{9}$'), handle_phone_input))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bet_value))
    
    application.run_polling()

if __name__ == "__main__":
    run_telegram_bot()